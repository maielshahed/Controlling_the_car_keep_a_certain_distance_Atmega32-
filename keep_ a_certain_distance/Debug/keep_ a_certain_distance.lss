
keep_ a_certain_distance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000918  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000918  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  000010e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1e  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ce  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000719  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000616  00000000  00000000  00002a81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 03 	call	0x7dc	; 0x7dc <main>
  8a:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetpindir>:
#include "Std_macros.h"

void DIO_vsetpindir(unsigned char port,unsigned char pin,unsigned char direction){
	
	
	switch(port){
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vsetpindir+0x6>
  96:	54 c0       	rjmp	.+168    	; 0x140 <DIO_vsetpindir+0xae>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vsetpindir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vsetpindir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vsetpindir+0x14>
  a4:	6a c0       	rjmp	.+212    	; 0x17a <DIO_vsetpindir+0xe8>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vsetpindir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vsetpindir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vsetpindir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vsetpindir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vsetpindir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vsetpindir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vsetpindir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vsetpindir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetpindir+0x32>
  c2:	5b c0       	rjmp	.+182    	; 0x17a <DIO_vsetpindir+0xe8>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vsetpindir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vsetpindir+0x120>
  ca:	3a c0       	rjmp	.+116    	; 0x140 <DIO_vsetpindir+0xae>
		
		case 'A':
		case 'a':
		if (direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vsetpindir+0x58>
		{
			SET_BIT(DDRA,pin);//Set the direction of the given pin in port A as output
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vsetpindir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vsetpindir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
			//DDRA |=(1<<pin);

		} 
		else
		{
			CLR_BIT(DDRA,pin);//CLEAR the direction of the given pin in port A as input
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetpindir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetpindir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vsetpindir+0x92>
		{
			SET_BIT(DDRB,pin);//Set the direction of the given pin in port B as output
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vsetpindir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vsetpindir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);//CLEAR the direction of the given pin in port B as input
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetpindir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetpindir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vsetpindir+0xcc>
		{
			SET_BIT(DDRD,pin);//Set the direction of the given pin in port D as output
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vsetpindir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vsetpindir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	61 bb       	out	0x11, r22	; 17
 15c:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);//CLEAR the direction of the given pin in port D as input
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vsetpindir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vsetpindir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	61 bb       	out	0x11, r22	; 17
 178:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vsetpindir+0x106>
		{
			SET_BIT(DDRC,pin);//Set the direction of the given pin in port C as output
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vsetpindir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vsetpindir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	64 bb       	out	0x14, r22	; 20
 196:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);//CLEAR the direction of the given pin in port C as input
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vsetpindir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vsetpindir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	64 bb       	out	0x14, r22	; 20
 1b2:	08 95       	ret

000001b4 <DIO_vwrite>:
}
//port direction==output
void DIO_vwrite(unsigned char port,unsigned char pin,unsigned char val){
	
	
	switch(port){
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite+0x6>
 1b8:	54 c0       	rjmp	.+168    	; 0x262 <DIO_vwrite+0xae>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite+0x14>
 1c6:	6a c0       	rjmp	.+212    	; 0x29c <DIO_vwrite+0xe8>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite+0x32>
 1e4:	5b c0       	rjmp	.+182    	; 0x29c <DIO_vwrite+0xe8>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite+0x120>
 1ec:	3a c0       	rjmp	.+116    	; 0x262 <DIO_vwrite+0xae>
		
		case 'A':
		case 'a':
		if (val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite+0x58>
		{
			SET_BIT(PORTA,pin);//Set the value of the given pin in port A as High
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
			//PORTA |=(1<<pin);

		}
		else
		{
			CLR_BIT(PORTA,pin);//Set the value of the given pin in port A as LOW
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite+0x92>
		{
			SET_BIT(PORTB,pin);//Set the value of the given pin in port B as High
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);//Set the value of the given pin in port B as LOW
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		
		case 'D':
		case 'd':
		if (val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite+0xcc>
		{
			SET_BIT(PORTD,pin);//Set the value of the given pin in port D as High
 266:	22 b3       	in	r18, 0x12	; 18
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	62 bb       	out	0x12, r22	; 18
 27e:	08 95       	ret


		}
		else
		{
			CLR_BIT(PORTD,pin);//Set the value of the given pin in port D as LOW
 280:	22 b3       	in	r18, 0x12	; 18
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	62 bb       	out	0x12, r22	; 18
 29a:	08 95       	ret
		}
		break;
		
		case 'C':
		case 'c':
		if (val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite+0x106>
		{
			SET_BIT(PORTC,pin);//Set the value of the given pin in port C as High
 2a0:	25 b3       	in	r18, 0x15	; 21
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	65 bb       	out	0x15, r22	; 21
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);//Set the value of the given pin in port C as LOW
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	65 bb       	out	0x15, r22	; 21
 2d4:	08 95       	ret

000002d6 <DIO_vtogglepin>:
		
	}
}

void DIO_vtogglepin(unsigned char port,unsigned char pin){
	switch(port){
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	81 f1       	breq	.+96     	; 0x33a <DIO_vtogglepin+0x64>
 2da:	85 34       	cpi	r24, 0x45	; 69
 2dc:	40 f4       	brcc	.+16     	; 0x2ee <DIO_vtogglepin+0x18>
 2de:	82 34       	cpi	r24, 0x42	; 66
 2e0:	f9 f0       	breq	.+62     	; 0x320 <DIO_vtogglepin+0x4a>
 2e2:	83 34       	cpi	r24, 0x43	; 67
 2e4:	b8 f5       	brcc	.+110    	; 0x354 <DIO_vtogglepin+0x7e>
 2e6:	81 34       	cpi	r24, 0x41	; 65
 2e8:	09 f0       	breq	.+2      	; 0x2ec <DIO_vtogglepin+0x16>
 2ea:	40 c0       	rjmp	.+128    	; 0x36c <DIO_vtogglepin+0x96>
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <DIO_vtogglepin+0x30>
 2ee:	82 36       	cpi	r24, 0x62	; 98
 2f0:	b9 f0       	breq	.+46     	; 0x320 <DIO_vtogglepin+0x4a>
 2f2:	83 36       	cpi	r24, 0x63	; 99
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_vtogglepin+0x26>
 2f6:	81 36       	cpi	r24, 0x61	; 97
 2f8:	c9 f5       	brne	.+114    	; 0x36c <DIO_vtogglepin+0x96>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <DIO_vtogglepin+0x30>
 2fc:	83 36       	cpi	r24, 0x63	; 99
 2fe:	51 f1       	breq	.+84     	; 0x354 <DIO_vtogglepin+0x7e>
 300:	84 36       	cpi	r24, 0x64	; 100
 302:	a1 f5       	brne	.+104    	; 0x36c <DIO_vtogglepin+0x96>
 304:	1a c0       	rjmp	.+52     	; 0x33a <DIO_vtogglepin+0x64>
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);//Toggle the value of the given pin in port A
 306:	2b b3       	in	r18, 0x1b	; 27
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac 01       	movw	r20, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vtogglepin+0x3e>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_vtogglepin+0x3a>
 318:	ba 01       	movw	r22, r20
 31a:	62 27       	eor	r22, r18
 31c:	6b bb       	out	0x1b, r22	; 27
		break;
 31e:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);//Toggle the value of the given pin in port B
 320:	28 b3       	in	r18, 0x18	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ac 01       	movw	r20, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_vtogglepin+0x58>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_vtogglepin+0x54>
 332:	ba 01       	movw	r22, r20
 334:	62 27       	eor	r22, r18
 336:	68 bb       	out	0x18, r22	; 24
		break;
 338:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);//Toggle the value of the given pin in port D
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_vtogglepin+0x72>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_vtogglepin+0x6e>
 34c:	ba 01       	movw	r22, r20
 34e:	62 27       	eor	r22, r18
 350:	62 bb       	out	0x12, r22	; 18
		break;
 352:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);//Toggle the value of the given pin in port C
 354:	25 b3       	in	r18, 0x15	; 21
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ac 01       	movw	r20, r24
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_vtogglepin+0x8c>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_vtogglepin+0x88>
 366:	ba 01       	movw	r22, r20
 368:	62 27       	eor	r22, r18
 36a:	65 bb       	out	0x15, r22	; 21
 36c:	08 95       	ret

0000036e <DIO_uread>:
		default:break;
	}
}
unsigned char DIO_uread(unsigned char port ,unsigned char pin){
	unsigned char return_value;
	switch(port){
 36e:	84 34       	cpi	r24, 0x44	; 68
 370:	09 f4       	brne	.+2      	; 0x374 <DIO_uread+0x6>
 372:	51 c0       	rjmp	.+162    	; 0x416 <DIO_uread+0xa8>
 374:	85 34       	cpi	r24, 0x45	; 69
 376:	40 f4       	brcc	.+16     	; 0x388 <DIO_uread+0x1a>
 378:	82 34       	cpi	r24, 0x42	; 66
 37a:	39 f1       	breq	.+78     	; 0x3ca <DIO_uread+0x5c>
 37c:	83 34       	cpi	r24, 0x43	; 67
 37e:	c0 f5       	brcc	.+112    	; 0x3f0 <DIO_uread+0x82>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	09 f0       	breq	.+2      	; 0x386 <DIO_uread+0x18>
 384:	5a c0       	rjmp	.+180    	; 0x43a <DIO_uread+0xcc>
 386:	0e c0       	rjmp	.+28     	; 0x3a4 <DIO_uread+0x36>
 388:	82 36       	cpi	r24, 0x62	; 98
 38a:	f9 f0       	breq	.+62     	; 0x3ca <DIO_uread+0x5c>
 38c:	83 36       	cpi	r24, 0x63	; 99
 38e:	20 f4       	brcc	.+8      	; 0x398 <DIO_uread+0x2a>
 390:	81 36       	cpi	r24, 0x61	; 97
 392:	09 f0       	breq	.+2      	; 0x396 <DIO_uread+0x28>
 394:	52 c0       	rjmp	.+164    	; 0x43a <DIO_uread+0xcc>
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <DIO_uread+0x36>
 398:	83 36       	cpi	r24, 0x63	; 99
 39a:	51 f1       	breq	.+84     	; 0x3f0 <DIO_uread+0x82>
 39c:	84 36       	cpi	r24, 0x64	; 100
 39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_uread+0x34>
 3a0:	4c c0       	rjmp	.+152    	; 0x43a <DIO_uread+0xcc>
 3a2:	39 c0       	rjmp	.+114    	; 0x416 <DIO_uread+0xa8>
		
		case 'A':
		case 'a':
		return_value=READ_BIT(PINA,pin);//Read the value from the given pin in port A
 3a4:	29 b3       	in	r18, 0x19	; 25
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	06 2e       	mov	r0, r22
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_uread+0x44>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_uread+0x40>
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	82 23       	and	r24, r18
 3ba:	93 23       	and	r25, r19
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_uread+0x54>
 3be:	96 95       	lsr	r25
 3c0:	87 95       	ror	r24
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_uread+0x50>
 3c6:	98 2f       	mov	r25, r24
		break;
 3c8:	38 c0       	rjmp	.+112    	; 0x43a <DIO_uread+0xcc>


	case 'B':
	case 'b':
	return_value=READ_BIT(PINB,pin);//Read the value from the given pin in port B
 3ca:	26 b3       	in	r18, 0x16	; 22
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_uread+0x6a>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_uread+0x66>
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_uread+0x7a>
 3e4:	96 95       	lsr	r25
 3e6:	87 95       	ror	r24
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_uread+0x76>
 3ec:	98 2f       	mov	r25, r24
	break;
 3ee:	25 c0       	rjmp	.+74     	; 0x43a <DIO_uread+0xcc>
		
			case 'C':
			case 'c':
			return_value=READ_BIT(PINC,pin);//Read the value from the given pin in port C
 3f0:	23 b3       	in	r18, 0x13	; 19
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	06 2e       	mov	r0, r22
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_uread+0x90>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_uread+0x8c>
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	82 23       	and	r24, r18
 406:	93 23       	and	r25, r19
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_uread+0xa0>
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_uread+0x9c>
 412:	98 2f       	mov	r25, r24
			break;
 414:	12 c0       	rjmp	.+36     	; 0x43a <DIO_uread+0xcc>
			
				case 'D':
				case 'd':
				return_value=READ_BIT(PIND,pin);//Read the value from the given pin in port D
 416:	20 b3       	in	r18, 0x10	; 16
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	06 2e       	mov	r0, r22
 41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_uread+0xb6>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	0a 94       	dec	r0
 426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_uread+0xb2>
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	82 23       	and	r24, r18
 42c:	93 23       	and	r25, r19
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_uread+0xc6>
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_uread+0xc2>
 438:	98 2f       	mov	r25, r24
				break;
		default:break;
		
	}
	return return_value;
}
 43a:	89 2f       	mov	r24, r25
 43c:	08 95       	ret

0000043e <DIO_vsetportdir>:
//direction port


void DIO_vsetportdir(unsigned char port,unsigned char direction){
	
	switch(port){
 43e:	84 34       	cpi	r24, 0x44	; 68
 440:	c9 f0       	breq	.+50     	; 0x474 <DIO_vsetportdir+0x36>
 442:	85 34       	cpi	r24, 0x45	; 69
 444:	38 f4       	brcc	.+14     	; 0x454 <DIO_vsetportdir+0x16>
 446:	82 34       	cpi	r24, 0x42	; 66
 448:	99 f0       	breq	.+38     	; 0x470 <DIO_vsetportdir+0x32>
 44a:	83 34       	cpi	r24, 0x43	; 67
 44c:	a8 f4       	brcc	.+42     	; 0x478 <DIO_vsetportdir+0x3a>
 44e:	81 34       	cpi	r24, 0x41	; 65
 450:	a1 f4       	brne	.+40     	; 0x47a <DIO_vsetportdir+0x3c>
 452:	0c c0       	rjmp	.+24     	; 0x46c <DIO_vsetportdir+0x2e>
 454:	82 36       	cpi	r24, 0x62	; 98
 456:	61 f0       	breq	.+24     	; 0x470 <DIO_vsetportdir+0x32>
 458:	83 36       	cpi	r24, 0x63	; 99
 45a:	18 f4       	brcc	.+6      	; 0x462 <DIO_vsetportdir+0x24>
 45c:	81 36       	cpi	r24, 0x61	; 97
 45e:	69 f4       	brne	.+26     	; 0x47a <DIO_vsetportdir+0x3c>
 460:	05 c0       	rjmp	.+10     	; 0x46c <DIO_vsetportdir+0x2e>
 462:	83 36       	cpi	r24, 0x63	; 99
 464:	49 f0       	breq	.+18     	; 0x478 <DIO_vsetportdir+0x3a>
 466:	84 36       	cpi	r24, 0x64	; 100
 468:	41 f4       	brne	.+16     	; 0x47a <DIO_vsetportdir+0x3c>
 46a:	04 c0       	rjmp	.+8      	; 0x474 <DIO_vsetportdir+0x36>
		
		case 'A':
		case 'a':
		DDRA=direction;//set the direction of port A
 46c:	6a bb       	out	0x1a, r22	; 26

		break;
 46e:	08 95       	ret
		
		case 'B':
		case 'b':	
			DDRB=direction;
 470:	67 bb       	out	0x17, r22	; 23

		break;
 472:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD=direction;
 474:	61 bb       	out	0x11, r22	; 17
		
		
		break;
 476:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC=direction;
 478:	64 bb       	out	0x14, r22	; 20
 47a:	08 95       	ret

0000047c <DIO_vWRITEport>:



void DIO_vWRITEport(unsigned char port,unsigned char val){
	
	switch(port){
 47c:	84 34       	cpi	r24, 0x44	; 68
 47e:	c9 f0       	breq	.+50     	; 0x4b2 <DIO_vWRITEport+0x36>
 480:	85 34       	cpi	r24, 0x45	; 69
 482:	38 f4       	brcc	.+14     	; 0x492 <DIO_vWRITEport+0x16>
 484:	82 34       	cpi	r24, 0x42	; 66
 486:	99 f0       	breq	.+38     	; 0x4ae <DIO_vWRITEport+0x32>
 488:	83 34       	cpi	r24, 0x43	; 67
 48a:	a8 f4       	brcc	.+42     	; 0x4b6 <DIO_vWRITEport+0x3a>
 48c:	81 34       	cpi	r24, 0x41	; 65
 48e:	a1 f4       	brne	.+40     	; 0x4b8 <DIO_vWRITEport+0x3c>
 490:	0c c0       	rjmp	.+24     	; 0x4aa <DIO_vWRITEport+0x2e>
 492:	82 36       	cpi	r24, 0x62	; 98
 494:	61 f0       	breq	.+24     	; 0x4ae <DIO_vWRITEport+0x32>
 496:	83 36       	cpi	r24, 0x63	; 99
 498:	18 f4       	brcc	.+6      	; 0x4a0 <DIO_vWRITEport+0x24>
 49a:	81 36       	cpi	r24, 0x61	; 97
 49c:	69 f4       	brne	.+26     	; 0x4b8 <DIO_vWRITEport+0x3c>
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <DIO_vWRITEport+0x2e>
 4a0:	83 36       	cpi	r24, 0x63	; 99
 4a2:	49 f0       	breq	.+18     	; 0x4b6 <DIO_vWRITEport+0x3a>
 4a4:	84 36       	cpi	r24, 0x64	; 100
 4a6:	41 f4       	brne	.+16     	; 0x4b8 <DIO_vWRITEport+0x3c>
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <DIO_vWRITEport+0x36>
		
		case 'A':
		case 'a':
		PORTA=val;//Write the given value to the port A
 4aa:	6b bb       	out	0x1b, r22	; 27

		break;
 4ac:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB=val;//Write the given value to the port B
 4ae:	68 bb       	out	0x18, r22	; 24
	

		break;
 4b0:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD=val;//Write the given value to the port D
 4b2:	62 bb       	out	0x12, r22	; 18
		
		break;
 4b4:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC=val;//Write the given value to the port C
 4b6:	65 bb       	out	0x15, r22	; 21
 4b8:	08 95       	ret

000004ba <DIO_ureadport>:
	}
	
	
	unsigned char DIO_ureadport(unsigned char port){
		unsigned char return_val;
		switch(port){
 4ba:	84 34       	cpi	r24, 0x44	; 68
 4bc:	d1 f0       	breq	.+52     	; 0x4f2 <DIO_ureadport+0x38>
 4be:	85 34       	cpi	r24, 0x45	; 69
 4c0:	38 f4       	brcc	.+14     	; 0x4d0 <DIO_ureadport+0x16>
 4c2:	82 34       	cpi	r24, 0x42	; 66
 4c4:	99 f0       	breq	.+38     	; 0x4ec <DIO_ureadport+0x32>
 4c6:	83 34       	cpi	r24, 0x43	; 67
 4c8:	b8 f4       	brcc	.+46     	; 0x4f8 <DIO_ureadport+0x3e>
 4ca:	81 34       	cpi	r24, 0x41	; 65
 4cc:	b9 f4       	brne	.+46     	; 0x4fc <DIO_ureadport+0x42>
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <DIO_ureadport+0x2e>
 4d0:	82 36       	cpi	r24, 0x62	; 98
 4d2:	61 f0       	breq	.+24     	; 0x4ec <DIO_ureadport+0x32>
 4d4:	83 36       	cpi	r24, 0x63	; 99
 4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_ureadport+0x24>
 4d8:	81 36       	cpi	r24, 0x61	; 97
 4da:	81 f4       	brne	.+32     	; 0x4fc <DIO_ureadport+0x42>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <DIO_ureadport+0x2e>
 4de:	83 36       	cpi	r24, 0x63	; 99
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <DIO_ureadport+0x3e>
 4e2:	84 36       	cpi	r24, 0x64	; 100
 4e4:	59 f4       	brne	.+22     	; 0x4fc <DIO_ureadport+0x42>
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <DIO_ureadport+0x38>
			
			case 'A':
			case 'a':
			return_val=PINA;//read the value to the port A
 4e8:	99 b3       	in	r25, 0x19	; 25

			break;
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <DIO_ureadport+0x42>
			
			case 'B':
			case 'b':
			PORTB=PINB;//READ value to the port B
 4ec:	86 b3       	in	r24, 0x16	; 22
 4ee:	88 bb       	out	0x18, r24	; 24
			

			break;
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_ureadport+0x42>
			
			case 'D':
			case 'd':
			PORTD=PIND;//READ  value to the port D
 4f2:	80 b3       	in	r24, 0x10	; 16
 4f4:	82 bb       	out	0x12, r24	; 18
			
			break;
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_ureadport+0x42>
			
			case 'C':
			case 'c':
			PORTC=PINC;//READ  value to the port C
 4f8:	83 b3       	in	r24, 0x13	; 19
 4fa:	85 bb       	out	0x15, r24	; 21
			break;
			default:break;
		}			
			return return_val;

		}
 4fc:	89 2f       	mov	r24, r25
 4fe:	08 95       	ret

00000500 <DIO_vtoggleport>:
		
		
void DIO_vtoggleport(unsigned char port){
			
			switch(port){
 500:	84 34       	cpi	r24, 0x44	; 68
 502:	e9 f0       	breq	.+58     	; 0x53e <DIO_vtoggleport+0x3e>
 504:	85 34       	cpi	r24, 0x45	; 69
 506:	38 f4       	brcc	.+14     	; 0x516 <DIO_vtoggleport+0x16>
 508:	82 34       	cpi	r24, 0x42	; 66
 50a:	a9 f0       	breq	.+42     	; 0x536 <DIO_vtoggleport+0x36>
 50c:	83 34       	cpi	r24, 0x43	; 67
 50e:	d8 f4       	brcc	.+54     	; 0x546 <DIO_vtoggleport+0x46>
 510:	81 34       	cpi	r24, 0x41	; 65
 512:	e1 f4       	brne	.+56     	; 0x54c <DIO_vtoggleport+0x4c>
 514:	0c c0       	rjmp	.+24     	; 0x52e <DIO_vtoggleport+0x2e>
 516:	82 36       	cpi	r24, 0x62	; 98
 518:	71 f0       	breq	.+28     	; 0x536 <DIO_vtoggleport+0x36>
 51a:	83 36       	cpi	r24, 0x63	; 99
 51c:	18 f4       	brcc	.+6      	; 0x524 <DIO_vtoggleport+0x24>
 51e:	81 36       	cpi	r24, 0x61	; 97
 520:	a9 f4       	brne	.+42     	; 0x54c <DIO_vtoggleport+0x4c>
 522:	05 c0       	rjmp	.+10     	; 0x52e <DIO_vtoggleport+0x2e>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	79 f0       	breq	.+30     	; 0x546 <DIO_vtoggleport+0x46>
 528:	84 36       	cpi	r24, 0x64	; 100
 52a:	81 f4       	brne	.+32     	; 0x54c <DIO_vtoggleport+0x4c>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <DIO_vtoggleport+0x3e>
				
				case 'A':
				case 'a':
				PORTA=~PORTA;    // or PORTA=PORTA^0xff
 52e:	8b b3       	in	r24, 0x1b	; 27
 530:	80 95       	com	r24
 532:	8b bb       	out	0x1b, r24	; 27
				break;
 534:	08 95       	ret
				
				case 'B':
				case 'b':
				PORTB=~PORTB;//Write the given value to the port B
 536:	88 b3       	in	r24, 0x18	; 24
 538:	80 95       	com	r24
 53a:	88 bb       	out	0x18, r24	; 24
				

				break;
 53c:	08 95       	ret
				
				case 'D':
				case 'd':
				PORTD=~PORTD;
 53e:	82 b3       	in	r24, 0x12	; 18
 540:	80 95       	com	r24
 542:	82 bb       	out	0x12, r24	; 18
				
				break;
 544:	08 95       	ret
				
				case 'C':
				case 'c':
				PORTC=~PORTC;
 546:	85 b3       	in	r24, 0x15	; 21
 548:	80 95       	com	r24
 54a:	85 bb       	out	0x15, r24	; 21
 54c:	08 95       	ret

0000054e <DIO_vconnectpullup>:
or

 */
void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 54e:	82 34       	cpi	r24, 0x42	; 66
 550:	51 f1       	breq	.+84     	; 0x5a6 <DIO_vconnectpullup+0x58>
 552:	83 34       	cpi	r24, 0x43	; 67
 554:	20 f4       	brcc	.+8      	; 0x55e <DIO_vconnectpullup+0x10>
 556:	81 34       	cpi	r24, 0x41	; 65
 558:	09 f0       	breq	.+2      	; 0x55c <DIO_vconnectpullup+0xe>
 55a:	7b c0       	rjmp	.+246    	; 0x652 <DIO_vconnectpullup+0x104>
 55c:	07 c0       	rjmp	.+14     	; 0x56c <DIO_vconnectpullup+0x1e>
 55e:	83 34       	cpi	r24, 0x43	; 67
 560:	09 f4       	brne	.+2      	; 0x564 <DIO_vconnectpullup+0x16>
 562:	3e c0       	rjmp	.+124    	; 0x5e0 <DIO_vconnectpullup+0x92>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	09 f0       	breq	.+2      	; 0x56a <DIO_vconnectpullup+0x1c>
 568:	74 c0       	rjmp	.+232    	; 0x652 <DIO_vconnectpullup+0x104>
 56a:	57 c0       	rjmp	.+174    	; 0x61a <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 56c:	41 30       	cpi	r20, 0x01	; 1
 56e:	69 f4       	brne	.+26     	; 0x58a <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 570:	2b b3       	in	r18, 0x1b	; 27
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	ac 01       	movw	r20, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_vconnectpullup+0x30>
 57a:	44 0f       	add	r20, r20
 57c:	55 1f       	adc	r21, r21
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_vconnectpullup+0x2c>
 582:	ba 01       	movw	r22, r20
 584:	62 2b       	or	r22, r18
 586:	6b bb       	out	0x1b, r22	; 27
 588:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	ac 01       	movw	r20, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vconnectpullup+0x4a>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vconnectpullup+0x46>
 59c:	ba 01       	movw	r22, r20
 59e:	60 95       	com	r22
 5a0:	62 23       	and	r22, r18
 5a2:	6b bb       	out	0x1b, r22	; 27
 5a4:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	69 f4       	brne	.+26     	; 0x5c4 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 5aa:	28 b3       	in	r18, 0x18	; 24
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	ac 01       	movw	r20, r24
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_vconnectpullup+0x6a>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_vconnectpullup+0x66>
 5bc:	ba 01       	movw	r22, r20
 5be:	62 2b       	or	r22, r18
 5c0:	68 bb       	out	0x18, r22	; 24
 5c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 5c4:	28 b3       	in	r18, 0x18	; 24
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	ac 01       	movw	r20, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vconnectpullup+0x84>
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vconnectpullup+0x80>
 5d6:	ba 01       	movw	r22, r20
 5d8:	60 95       	com	r22
 5da:	62 23       	and	r22, r18
 5dc:	68 bb       	out	0x18, r22	; 24
 5de:	08 95       	ret
		}
		break;
	case 'C':
	if(connect_pullup==1)
 5e0:	41 30       	cpi	r20, 0x01	; 1
 5e2:	69 f4       	brne	.+26     	; 0x5fe <DIO_vconnectpullup+0xb0>
	{
		SET_BIT(PORTC,pinnumber);
 5e4:	25 b3       	in	r18, 0x15	; 21
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	ac 01       	movw	r20, r24
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vconnectpullup+0xa4>
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vconnectpullup+0xa0>
 5f6:	ba 01       	movw	r22, r20
 5f8:	62 2b       	or	r22, r18
 5fa:	65 bb       	out	0x15, r22	; 21
 5fc:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTC,pinnumber);
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ac 01       	movw	r20, r24
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vconnectpullup+0xbe>
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vconnectpullup+0xba>
 610:	ba 01       	movw	r22, r20
 612:	60 95       	com	r22
 614:	62 23       	and	r22, r18
 616:	65 bb       	out	0x15, r22	; 21
 618:	08 95       	ret
	}
	break;
	case 'D':
	if(connect_pullup==1)
 61a:	41 30       	cpi	r20, 0x01	; 1
 61c:	69 f4       	brne	.+26     	; 0x638 <DIO_vconnectpullup+0xea>
	{
		SET_BIT(PORTD,pinnumber);
 61e:	22 b3       	in	r18, 0x12	; 18
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	ac 01       	movw	r20, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_vconnectpullup+0xde>
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_vconnectpullup+0xda>
 630:	ba 01       	movw	r22, r20
 632:	62 2b       	or	r22, r18
 634:	62 bb       	out	0x12, r22	; 18
 636:	08 95       	ret
		
	}
	else
	{
		CLR_BIT(PORTD,pinnumber);
 638:	22 b3       	in	r18, 0x12	; 18
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	ac 01       	movw	r20, r24
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_vconnectpullup+0xf8>
 642:	44 0f       	add	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_vconnectpullup+0xf4>
 64a:	ba 01       	movw	r22, r20
 64c:	60 95       	com	r22
 64e:	62 23       	and	r22, r18
 650:	62 bb       	out	0x12, r22	; 18
 652:	08 95       	ret

00000654 <write_low_nibble>:
}

	//We will increase  these two functions in DIO.c
	void write_low_nibble(unsigned char portname,unsigned char value)
	{
		value&=0x0f;
 654:	6f 70       	andi	r22, 0x0F	; 15
		switch(portname)
 656:	82 34       	cpi	r24, 0x42	; 66
 658:	89 f0       	breq	.+34     	; 0x67c <write_low_nibble+0x28>
 65a:	83 34       	cpi	r24, 0x43	; 67
 65c:	18 f4       	brcc	.+6      	; 0x664 <write_low_nibble+0x10>
 65e:	81 34       	cpi	r24, 0x41	; 65
 660:	09 f5       	brne	.+66     	; 0x6a4 <write_low_nibble+0x50>
 662:	05 c0       	rjmp	.+10     	; 0x66e <write_low_nibble+0x1a>
 664:	83 34       	cpi	r24, 0x43	; 67
 666:	89 f0       	breq	.+34     	; 0x68a <write_low_nibble+0x36>
 668:	84 34       	cpi	r24, 0x44	; 68
 66a:	e1 f4       	brne	.+56     	; 0x6a4 <write_low_nibble+0x50>
 66c:	15 c0       	rjmp	.+42     	; 0x698 <write_low_nibble+0x44>
		{
			case 'A':
			PORTA&=0xf0;// 0b11110000
 66e:	8b b3       	in	r24, 0x1b	; 27
 670:	80 7f       	andi	r24, 0xF0	; 240
 672:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 674:	8b b3       	in	r24, 0x1b	; 27
 676:	68 2b       	or	r22, r24
 678:	6b bb       	out	0x1b, r22	; 27
			break;
 67a:	08 95       	ret
			case 'B':
			PORTB&=0xf0;
 67c:	88 b3       	in	r24, 0x18	; 24
 67e:	80 7f       	andi	r24, 0xF0	; 240
 680:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 682:	88 b3       	in	r24, 0x18	; 24
 684:	68 2b       	or	r22, r24
 686:	68 bb       	out	0x18, r22	; 24
			break;
 688:	08 95       	ret
case 'C':
PORTC&=0xf0;
 68a:	85 b3       	in	r24, 0x15	; 21
 68c:	80 7f       	andi	r24, 0xF0	; 240
 68e:	85 bb       	out	0x15, r24	; 21
PORTC|=value;
 690:	85 b3       	in	r24, 0x15	; 21
 692:	68 2b       	or	r22, r24
 694:	65 bb       	out	0x15, r22	; 21
break;
 696:	08 95       	ret
case 'D':
PORTD&=0xf0;
 698:	82 b3       	in	r24, 0x12	; 18
 69a:	80 7f       	andi	r24, 0xF0	; 240
 69c:	82 bb       	out	0x12, r24	; 18
PORTD|=value;
 69e:	82 b3       	in	r24, 0x12	; 18
 6a0:	68 2b       	or	r22, r24
 6a2:	62 bb       	out	0x12, r22	; 18
 6a4:	08 95       	ret

000006a6 <write_high_nibble>:
}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 6a6:	62 95       	swap	r22
 6a8:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6aa:	82 34       	cpi	r24, 0x42	; 66
 6ac:	89 f0       	breq	.+34     	; 0x6d0 <write_high_nibble+0x2a>
 6ae:	83 34       	cpi	r24, 0x43	; 67
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <write_high_nibble+0x12>
 6b2:	81 34       	cpi	r24, 0x41	; 65
 6b4:	09 f5       	brne	.+66     	; 0x6f8 <write_high_nibble+0x52>
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <write_high_nibble+0x1c>
 6b8:	83 34       	cpi	r24, 0x43	; 67
 6ba:	89 f0       	breq	.+34     	; 0x6de <write_high_nibble+0x38>
 6bc:	84 34       	cpi	r24, 0x44	; 68
 6be:	e1 f4       	brne	.+56     	; 0x6f8 <write_high_nibble+0x52>
 6c0:	15 c0       	rjmp	.+42     	; 0x6ec <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 6c2:	8b b3       	in	r24, 0x1b	; 27
 6c4:	8f 70       	andi	r24, 0x0F	; 15
 6c6:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	68 2b       	or	r22, r24
 6cc:	6b bb       	out	0x1b, r22	; 27
		break;
 6ce:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 6d0:	88 b3       	in	r24, 0x18	; 24
 6d2:	8f 70       	andi	r24, 0x0F	; 15
 6d4:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	68 2b       	or	r22, r24
 6da:	68 bb       	out	0x18, r22	; 24
		break;
 6dc:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 6de:	85 b3       	in	r24, 0x15	; 21
 6e0:	8f 70       	andi	r24, 0x0F	; 15
 6e2:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 6e4:	85 b3       	in	r24, 0x15	; 21
 6e6:	68 2b       	or	r22, r24
 6e8:	65 bb       	out	0x15, r22	; 21
		break;
 6ea:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 6ec:	82 b3       	in	r24, 0x12	; 18
 6ee:	8f 70       	andi	r24, 0x0F	; 15
 6f0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 6f2:	82 b3       	in	r24, 0x12	; 18
 6f4:	68 2b       	or	r22, r24
 6f6:	62 bb       	out	0x12, r22	; 18
 6f8:	08 95       	ret

000006fa <motor_vinti>:

int x=80;


void motor_vinti(){
DDRB=0XFF;//output motor  left
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	87 bb       	out	0x17, r24	; 23

DDRA=0XFF;// motor output right
 6fe:	8a bb       	out	0x1a, r24	; 26

//L293D Pin 1 -> En1 -> motor 1

SET_BIT(PORTA,2);
 700:	da 9a       	sbi	0x1b, 2	; 27
//L293D Pin 9 -> En2 -> motor 2
SET_BIT(PORTA,3);
 702:	db 9a       	sbi	0x1b, 3	; 27
//L293D Pin 1 -> En1 -> motor 3
SET_BIT(PORTB,2);
 704:	c2 9a       	sbi	0x18, 2	; 24
//L293D Pin 1 -> En2 -> motor 4
SET_BIT(PORTB,3);
 706:	c3 9a       	sbi	0x18, 3	; 24

}
 708:	08 95       	ret

0000070a <left_forword>:
		

void left_forword(){
	/*left ROTAT MOTOR CLOCKWISE*/
	
	DIO_vwrite('B',0,1);
 70a:	82 e4       	ldi	r24, 0x42	; 66
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('B',5,1);
 714:	82 e4       	ldi	r24, 0x42	; 66
 716:	65 e0       	ldi	r22, 0x05	; 5
 718:	41 e0       	ldi	r20, 0x01	; 1
 71a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	
}
 71e:	08 95       	ret

00000720 <left_backword>:

void left_backword(){
	
	
	/* left ROTAT MOTOR ANTI-CLOCKWISE*/
	DIO_vwrite('B',1,1);
 720:	82 e4       	ldi	r24, 0x42	; 66
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	DIO_vwrite('B',4,1);
 72a:	82 e4       	ldi	r24, 0x42	; 66
 72c:	64 e0       	ldi	r22, 0x04	; 4
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	
	
}
 734:	08 95       	ret

00000736 <right_forword>:

	

	void right_forword(){
		/*right ROTAT MOTOR CLOCKWISE*/
		DIO_vwrite('A',0,1);
 736:	81 e4       	ldi	r24, 0x41	; 65
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('A',5,1);
 740:	81 e4       	ldi	r24, 0x41	; 65
 742:	65 e0       	ldi	r22, 0x05	; 5
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	
		
	}
 74a:	08 95       	ret

0000074c <right_backword>:

	void right_backword(){
		
		/* left ROTAT MOTOR ANTI-CLOCKWISE*/
		DIO_vwrite('A',1,1);
 74c:	81 e4       	ldi	r24, 0x41	; 65
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		DIO_vwrite('A',4,1);
 756:	81 e4       	ldi	r24, 0x41	; 65
 758:	64 e0       	ldi	r22, 0x04	; 4
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	
		
	}
 760:	08 95       	ret

00000762 <motor_forword>:
	
	void motor_forword(){
		left_forword();
 762:	0e 94 85 03 	call	0x70a	; 0x70a <left_forword>
		right_forword();
 766:	0e 94 9b 03 	call	0x736	; 0x736 <right_forword>

		
	}
 76a:	08 95       	ret

0000076c <motor_backword>:
	
	
		void motor_backword(){
			left_backword();
 76c:	0e 94 90 03 	call	0x720	; 0x720 <left_backword>
			right_backword();
 770:	0e 94 a6 03 	call	0x74c	; 0x74c <right_backword>
	
			
		}
 774:	08 95       	ret

00000776 <turn_right>:
		
		
	void turn_right(){
		left_forword();
 776:	0e 94 85 03 	call	0x70a	; 0x70a <left_forword>
		right_backword();
 77a:	0e 94 a6 03 	call	0x74c	; 0x74c <right_backword>
		
	}
 77e:	08 95       	ret

00000780 <turn_left>:
	
	void turn_left(){
		left_backword();
 780:	0e 94 90 03 	call	0x720	; 0x720 <left_backword>
		right_forword();
 784:	0e 94 9b 03 	call	0x736	; 0x736 <right_forword>
	}
 788:	08 95       	ret

0000078a <stop_motor>:
	
	void stop_motor(){

			DIO_vwrite('A',0,0);
 78a:	81 e4       	ldi	r24, 0x41	; 65
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
			DIO_vwrite('A',5,0);
 794:	81 e4       	ldi	r24, 0x41	; 65
 796:	65 e0       	ldi	r22, 0x05	; 5
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
			DIO_vwrite('B',0,0);
 79e:	82 e4       	ldi	r24, 0x42	; 66
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	40 e0       	ldi	r20, 0x00	; 0
 7a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
			DIO_vwrite('B',5,0);	
 7a8:	82 e4       	ldi	r24, 0x42	; 66
 7aa:	65 e0       	ldi	r22, 0x05	; 5
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
					DIO_vwrite('A',1,0);
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
					DIO_vwrite('A',4,0);
 7bc:	81 e4       	ldi	r24, 0x41	; 65
 7be:	64 e0       	ldi	r22, 0x04	; 4
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
					DIO_vwrite('B',1,0);
 7c6:	82 e4       	ldi	r24, 0x42	; 66
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	40 e0       	ldi	r20, 0x00	; 0
 7cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
					DIO_vwrite('B',4,0);
 7d0:	82 e4       	ldi	r24, 0x42	; 66
 7d2:	64 e0       	ldi	r22, 0x04	; 4
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	}
 7da:	08 95       	ret

000007dc <main>:
int main(void)
{
	
	unsigned short a,b,high,distance,forword_distance=0,backword_distance=0;
	
	DIO_vsetpindir('D',5,1);//output servo motor
 7dc:	84 e4       	ldi	r24, 0x44	; 68
 7de:	65 e0       	ldi	r22, 0x05	; 5
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
	DIO_vsetpindir('D',7,1);//tr--- PD6 echo 
 7e6:	84 e4       	ldi	r24, 0x44	; 68
 7e8:	67 e0       	ldi	r22, 0x07	; 7
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetpindir>
    {
        //TODO:: Please write your application code 
		
		
		TCCR1A = 0;
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 7f0:	c0 e2       	ldi	r28, 0x20	; 32
		DIO_vwrite('D',7,1);
		_delay_us(50);
		DIO_vwrite('D',7,0);
		
		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 7f2:	d1 ec       	ldi	r29, 0xC1	; 193
		while ((TIFR&(1<<ICF1)) == 0);
		a = ICR1;  		/* Take value of capture register */
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 7f4:	11 e8       	ldi	r17, 0x81	; 129
		b = ICR1;  		/* Take value of capture register */
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
		TCNT1=0;
		TCCR1B = 0;  		/* Stop the timer */
		high=b-a;
		distance=((high*34600)/(F_CPU*2)) ;
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f0 e8       	ldi	r31, 0x80	; 128
 7fa:	cf 2e       	mov	r12, r31
 7fc:	f4 e8       	ldi	r31, 0x84	; 132
 7fe:	df 2e       	mov	r13, r31
 800:	fe e1       	ldi	r31, 0x1E	; 30
 802:	ef 2e       	mov	r14, r31
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	ff 2e       	mov	r15, r31
 808:	f0 2d       	mov	r31, r0
    while(1)
    {
        //TODO:: Please write your application code 
		
		
		TCCR1A = 0;
 80a:	1f bc       	out	0x2f, r1	; 47
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 80c:	c8 bf       	out	0x38, r28	; 56
		DIO_vwrite('D',7,1);
 80e:	84 e4       	ldi	r24, 0x44	; 68
 810:	67 e0       	ldi	r22, 0x07	; 7
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 818:	80 e1       	ldi	r24, 0x10	; 16
 81a:	8a 95       	dec	r24
 81c:	f1 f7       	brne	.-4      	; 0x81a <main+0x3e>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <main+0x44>
		_delay_us(50);
		DIO_vwrite('D',7,0);
 820:	84 e4       	ldi	r24, 0x44	; 68
 822:	67 e0       	ldi	r22, 0x07	; 7
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite>
		
		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 82a:	de bd       	out	0x2e, r29	; 46
		while ((TIFR&(1<<ICF1)) == 0);
 82c:	08 b6       	in	r0, 0x38	; 56
 82e:	05 fe       	sbrs	r0, 5
 830:	fd cf       	rjmp	.-6      	; 0x82c <main+0x50>
		a = ICR1;  		/* Take value of capture register */
 832:	86 b5       	in	r24, 0x26	; 38
 834:	97 b5       	in	r25, 0x27	; 39
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
 836:	c8 bf       	out	0x38, r28	; 56
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 838:	1e bd       	out	0x2e, r17	; 46
		while ((TIFR&(1<<ICF1)) == 0);
 83a:	08 b6       	in	r0, 0x38	; 56
 83c:	05 fe       	sbrs	r0, 5
 83e:	fd cf       	rjmp	.-6      	; 0x83a <main+0x5e>
		b = ICR1;  		/* Take value of capture register */
 840:	66 b5       	in	r22, 0x26	; 38
 842:	77 b5       	in	r23, 0x27	; 39
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
 844:	c8 bf       	out	0x38, r28	; 56
		TCNT1=0;
 846:	1d bc       	out	0x2d, r1	; 45
 848:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0;  		/* Stop the timer */
 84a:	1e bc       	out	0x2e, r1	; 46
		high=b-a;
 84c:	68 1b       	sub	r22, r24
 84e:	79 0b       	sbc	r23, r25
		distance=((high*34600)/(F_CPU*2)) ;
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	28 e2       	ldi	r18, 0x28	; 40
 856:	37 e8       	ldi	r19, 0x87	; 135
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	0e 94 49 04 	call	0x892	; 0x892 <__mulsi3>
 860:	a7 01       	movw	r20, r14
 862:	96 01       	movw	r18, r12
 864:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
		
		
		if (distance>=15 && distance<=20)
 868:	c9 01       	movw	r24, r18
 86a:	0f 97       	sbiw	r24, 0x0f	; 15
 86c:	86 30       	cpi	r24, 0x06	; 6
 86e:	91 05       	cpc	r25, r1
 870:	18 f4       	brcc	.+6      	; 0x878 <__stack+0x19>
		{
			stop_motor();
 872:	0e 94 c5 03 	call	0x78a	; 0x78a <stop_motor>
 876:	c9 cf       	rjmp	.-110    	; 0x80a <main+0x2e>
		} 
		else if(distance>20)
 878:	25 31       	cpi	r18, 0x15	; 21
 87a:	31 05       	cpc	r19, r1
 87c:	18 f0       	brcs	.+6      	; 0x884 <__stack+0x25>
		{
			motor_forword();
 87e:	0e 94 b1 03 	call	0x762	; 0x762 <motor_forword>
 882:	c3 cf       	rjmp	.-122    	; 0x80a <main+0x2e>
		}else if (distance<15)
 884:	2f 30       	cpi	r18, 0x0F	; 15
 886:	31 05       	cpc	r19, r1
 888:	08 f0       	brcs	.+2      	; 0x88c <__stack+0x2d>
 88a:	bf cf       	rjmp	.-130    	; 0x80a <main+0x2e>
		{
			motor_backword();
 88c:	0e 94 b6 03 	call	0x76c	; 0x76c <motor_backword>
 890:	bc cf       	rjmp	.-136    	; 0x80a <main+0x2e>

00000892 <__mulsi3>:
 892:	62 9f       	mul	r22, r18
 894:	d0 01       	movw	r26, r0
 896:	73 9f       	mul	r23, r19
 898:	f0 01       	movw	r30, r0
 89a:	82 9f       	mul	r24, r18
 89c:	e0 0d       	add	r30, r0
 89e:	f1 1d       	adc	r31, r1
 8a0:	64 9f       	mul	r22, r20
 8a2:	e0 0d       	add	r30, r0
 8a4:	f1 1d       	adc	r31, r1
 8a6:	92 9f       	mul	r25, r18
 8a8:	f0 0d       	add	r31, r0
 8aa:	83 9f       	mul	r24, r19
 8ac:	f0 0d       	add	r31, r0
 8ae:	74 9f       	mul	r23, r20
 8b0:	f0 0d       	add	r31, r0
 8b2:	65 9f       	mul	r22, r21
 8b4:	f0 0d       	add	r31, r0
 8b6:	99 27       	eor	r25, r25
 8b8:	72 9f       	mul	r23, r18
 8ba:	b0 0d       	add	r27, r0
 8bc:	e1 1d       	adc	r30, r1
 8be:	f9 1f       	adc	r31, r25
 8c0:	63 9f       	mul	r22, r19
 8c2:	b0 0d       	add	r27, r0
 8c4:	e1 1d       	adc	r30, r1
 8c6:	f9 1f       	adc	r31, r25
 8c8:	bd 01       	movw	r22, r26
 8ca:	cf 01       	movw	r24, r30
 8cc:	11 24       	eor	r1, r1
 8ce:	08 95       	ret

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
